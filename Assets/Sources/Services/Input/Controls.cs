//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Sources/Services/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""766a26bf-cdb7-4262-bd7a-88bb20e1fb5d"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""78e66a7a-60ac-4372-8f78-f9a5ccc0f54a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AlternativeFire"",
                    ""type"": ""Button"",
                    ""id"": ""8db6abec-8071-4b2c-bc72-3c9a61f9ffa6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeftRight"",
                    ""type"": ""Button"",
                    ""id"": ""ee519d11-1655-4d1c-8074-5d264a811471"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveForwardBack"",
                    ""type"": ""Button"",
                    ""id"": ""80fedf03-6edd-4e59-b545-7550a29a2ce9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""a3c1e126-5d0b-4bd4-be19-21b6263d75d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ApplyAction"",
                    ""type"": ""Button"",
                    ""id"": ""730a565c-8a36-430e-bc63-1daacb3e59e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""aff0db6a-d1f5-4437-a978-2a38418a8a5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c555e9e-eb7f-409c-b71b-ce021c3e1fc7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebc0d5ca-50a6-4884-8971-d1f9b1bcbf04"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AlternativeFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6a87baaa-2139-4f2e-9b40-58213251dfef"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d37d9f31-b5e2-4b53-93e0-ed4256f66299"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""dea96a9a-9629-4464-ac74-c534b6f42de7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9aba5422-9e2d-4584-b474-ac52a8aadccf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardBack"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""853f7ecc-7845-4cd8-820e-81f8e47ec75b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MoveForwardBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""760cc43e-6078-4f80-9470-a4f861f5e700"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MoveForwardBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""87636d9d-ec4e-455d-b57d-872355ccd4a0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2af1a0ce-e24e-4eea-b8e3-fabfc77b058a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""ApplyAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89cf83f5-e4a0-4f86-acc0-af359c99ecbf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9ab63ae-512d-4549-b705-86158d496637"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""995570c1-d0f9-4b4e-b16c-eae166ce5b17"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""795c2609-9258-4821-84b3-1f8e10f18912"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7bbf19f-7151-41e5-80a5-795555d09531"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eafadb45-be44-4f86-9ba9-9e7a94b7593c"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b31ff1e-82ce-4cd6-a903-c73f56608465"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b98cbaec-7756-4a8c-9cc4-e32ca323eaf9"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SelectWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Fire = m_Main.FindAction("Fire", throwIfNotFound: true);
        m_Main_AlternativeFire = m_Main.FindAction("AlternativeFire", throwIfNotFound: true);
        m_Main_MoveLeftRight = m_Main.FindAction("MoveLeftRight", throwIfNotFound: true);
        m_Main_MoveForwardBack = m_Main.FindAction("MoveForwardBack", throwIfNotFound: true);
        m_Main_Dash = m_Main.FindAction("Dash", throwIfNotFound: true);
        m_Main_ApplyAction = m_Main.FindAction("ApplyAction", throwIfNotFound: true);
        m_Main_SelectWeapon = m_Main.FindAction("SelectWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Fire;
    private readonly InputAction m_Main_AlternativeFire;
    private readonly InputAction m_Main_MoveLeftRight;
    private readonly InputAction m_Main_MoveForwardBack;
    private readonly InputAction m_Main_Dash;
    private readonly InputAction m_Main_ApplyAction;
    private readonly InputAction m_Main_SelectWeapon;
    public struct MainActions
    {
        private @Controls m_Wrapper;
        public MainActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Main_Fire;
        public InputAction @AlternativeFire => m_Wrapper.m_Main_AlternativeFire;
        public InputAction @MoveLeftRight => m_Wrapper.m_Main_MoveLeftRight;
        public InputAction @MoveForwardBack => m_Wrapper.m_Main_MoveForwardBack;
        public InputAction @Dash => m_Wrapper.m_Main_Dash;
        public InputAction @ApplyAction => m_Wrapper.m_Main_ApplyAction;
        public InputAction @SelectWeapon => m_Wrapper.m_Main_SelectWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_MainActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnFire;
                @AlternativeFire.started -= m_Wrapper.m_MainActionsCallbackInterface.OnAlternativeFire;
                @AlternativeFire.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnAlternativeFire;
                @AlternativeFire.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnAlternativeFire;
                @MoveLeftRight.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveLeftRight;
                @MoveLeftRight.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveLeftRight;
                @MoveLeftRight.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveLeftRight;
                @MoveForwardBack.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveForwardBack;
                @MoveForwardBack.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveForwardBack;
                @MoveForwardBack.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveForwardBack;
                @Dash.started -= m_Wrapper.m_MainActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnDash;
                @ApplyAction.started -= m_Wrapper.m_MainActionsCallbackInterface.OnApplyAction;
                @ApplyAction.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnApplyAction;
                @ApplyAction.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnApplyAction;
                @SelectWeapon.started -= m_Wrapper.m_MainActionsCallbackInterface.OnSelectWeapon;
                @SelectWeapon.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnSelectWeapon;
                @SelectWeapon.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnSelectWeapon;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @AlternativeFire.started += instance.OnAlternativeFire;
                @AlternativeFire.performed += instance.OnAlternativeFire;
                @AlternativeFire.canceled += instance.OnAlternativeFire;
                @MoveLeftRight.started += instance.OnMoveLeftRight;
                @MoveLeftRight.performed += instance.OnMoveLeftRight;
                @MoveLeftRight.canceled += instance.OnMoveLeftRight;
                @MoveForwardBack.started += instance.OnMoveForwardBack;
                @MoveForwardBack.performed += instance.OnMoveForwardBack;
                @MoveForwardBack.canceled += instance.OnMoveForwardBack;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @ApplyAction.started += instance.OnApplyAction;
                @ApplyAction.performed += instance.OnApplyAction;
                @ApplyAction.canceled += instance.OnApplyAction;
                @SelectWeapon.started += instance.OnSelectWeapon;
                @SelectWeapon.performed += instance.OnSelectWeapon;
                @SelectWeapon.canceled += instance.OnSelectWeapon;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnAlternativeFire(InputAction.CallbackContext context);
        void OnMoveLeftRight(InputAction.CallbackContext context);
        void OnMoveForwardBack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnApplyAction(InputAction.CallbackContext context);
        void OnSelectWeapon(InputAction.CallbackContext context);
    }
}
